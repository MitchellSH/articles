{"ast":null,"code":"var _jsxFileName = \"/Users/Mitchell/Documents/code/my-code.projects/mern-crud-articles/client/src/App.js\";\nimport React, { Component } from \"react\";\nimport axios from \"axios\";\n\nclass App extends Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      data: [],\n      id: 0,\n      message: null,\n      intervalIsSet: false,\n      idToDelete: null,\n      idToUpdate: null,\n      objectToUpdate: null\n    };\n\n    this.getDataFromDb = () => {\n      fetch(\"http://localhost:3001/articles\").then(data => data.json()).then(res => {\n        console.log(res.body);\n        this.setState({\n          data: res.body\n        });\n      });\n    };\n\n    this.putDataToDB = message => {\n      let currentIds = this.state.data.map(data => data.id);\n      let idToBeAdded = 0;\n\n      while (currentIds.includes(idToBeAdded)) {\n        ++idToBeAdded;\n      }\n\n      axios.post(\"http://localhost:3001/api/putData\", {\n        id: idToBeAdded,\n        message: message\n      });\n    };\n\n    this.deleteFromDB = idTodelete => {\n      let objIdToDelete = null;\n      this.state.data.forEach(dat => {\n        if (dat.id == idTodelete) {\n          objIdToDelete = dat._id;\n        }\n      });\n      axios.delete(\"http://localhost:3001/api/deleteData\", {\n        data: {\n          id: objIdToDelete\n        }\n      });\n    };\n\n    this.updateDB = (idToUpdate, updateToApply) => {\n      let objIdToUpdate = null;\n      this.state.data.forEach(dat => {\n        if (dat.id == idToUpdate) {\n          objIdToUpdate = dat._id;\n        }\n      });\n      axios.post(\"http://localhost:3001/api/updateData\", {\n        id: objIdToUpdate,\n        update: {\n          message: updateToApply\n        }\n      });\n    };\n  }\n\n  // when component mounts, first thing it does is fetch all existing data in our db\n  // then we incorporate a polling logic so that we can easily see if our db has\n  // changed and implement those changes into our UI\n  componentDidMount() {\n    this.getDataFromDb();\n\n    if (!this.state.intervalIsSet) {\n      let interval = setInterval(this.getDataFromDb, 1000);\n      this.setState({\n        intervalIsSet: interval\n      });\n    }\n  } // never let a process live forever\n  // always kill a process everytime we are done using it\n\n\n  componentWillUnmount() {\n    if (this.state.intervalIsSet) {\n      clearInterval(this.state.intervalIsSet);\n      this.setState({\n        intervalIsSet: null\n      });\n    }\n  } // just a note, here, in the front end, we use the id key of our data object\n  // in order to identify which we want to Update or delete.\n  // for our back end, we use the object id assigned by MongoDB to modify\n  // data base entries\n  // our first get method that uses our backend api to\n  // fetch data from our data base\n\n\n  // here is our UI\n  // it is easy to understand their functions when you\n  // see them render into our screen\n  render() {\n    const data = this.state.data;\n    return React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 109\n      },\n      __self: this\n    }, React.createElement(\"ul\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 110\n      },\n      __self: this\n    }, data.length <= 0 ? \"NO DB ENTRIES YET\" : data.map(dat => React.createElement(\"li\", {\n      style: {\n        padding: \"10px\"\n      },\n      key: data.message,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 114\n      },\n      __self: this\n    }, React.createElement(\"span\", {\n      style: {\n        color: \"gray\"\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 115\n      },\n      __self: this\n    }, \" id: \"), \" \", dat.id, \" \", React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 115\n      },\n      __self: this\n    }), React.createElement(\"span\", {\n      style: {\n        color: \"gray\"\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 116\n      },\n      __self: this\n    }, \" data: \"), dat.message))), React.createElement(\"div\", {\n      style: {\n        padding: \"10px\"\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 121\n      },\n      __self: this\n    }, React.createElement(\"input\", {\n      type: \"text\",\n      onChange: e => this.setState({\n        message: e.target.value\n      }),\n      placeholder: \"add something in the database\",\n      style: {\n        width: \"200px\"\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 122\n      },\n      __self: this\n    }), React.createElement(\"button\", {\n      onClick: () => this.putDataToDB(this.state.message),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 128\n      },\n      __self: this\n    }, \"ADD\")), React.createElement(\"div\", {\n      style: {\n        padding: \"10px\"\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 132\n      },\n      __self: this\n    }, React.createElement(\"input\", {\n      type: \"text\",\n      style: {\n        width: \"200px\"\n      },\n      onChange: e => this.setState({\n        idToDelete: e.target.value\n      }),\n      placeholder: \"put id of item to delete here\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 133\n      },\n      __self: this\n    }), React.createElement(\"button\", {\n      onClick: () => this.deleteFromDB(this.state.idToDelete),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 139\n      },\n      __self: this\n    }, \"DELETE\")), React.createElement(\"div\", {\n      style: {\n        padding: \"10px\"\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 143\n      },\n      __self: this\n    }, React.createElement(\"input\", {\n      type: \"text\",\n      style: {\n        width: \"200px\"\n      },\n      onChange: e => this.setState({\n        idToUpdate: e.target.value\n      }),\n      placeholder: \"id of item to update here\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 144\n      },\n      __self: this\n    }), React.createElement(\"input\", {\n      type: \"text\",\n      style: {\n        width: \"200px\"\n      },\n      onChange: e => this.setState({\n        updateToApply: e.target.value\n      }),\n      placeholder: \"put new value of the item here\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 150\n      },\n      __self: this\n    }), React.createElement(\"button\", {\n      onClick: () => this.updateDB(this.state.idToUpdate, this.state.updateToApply),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 156\n      },\n      __self: this\n    }, \"UPDATE\")));\n  }\n\n}\n\nexport default App;","map":{"version":3,"sources":["/Users/Mitchell/Documents/code/my-code.projects/mern-crud-articles/client/src/App.js"],"names":["React","Component","axios","App","state","data","id","message","intervalIsSet","idToDelete","idToUpdate","objectToUpdate","getDataFromDb","fetch","then","json","res","console","log","body","setState","putDataToDB","currentIds","map","idToBeAdded","includes","post","deleteFromDB","idTodelete","objIdToDelete","forEach","dat","_id","delete","updateDB","updateToApply","objIdToUpdate","update","componentDidMount","interval","setInterval","componentWillUnmount","clearInterval","render","length","padding","color","e","target","value","width"],"mappings":"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","sourcesContent":["import React, { Component } from \"react\";\nimport axios from \"axios\";\n\nclass App extends Component {\n  // initialize our state\n  state = {\n    data: [],\n    id: 0,\n    message: null,\n    intervalIsSet: false,\n    idToDelete: null,\n    idToUpdate: null,\n    objectToUpdate: null\n  };\n\n  // when component mounts, first thing it does is fetch all existing data in our db\n  // then we incorporate a polling logic so that we can easily see if our db has\n  // changed and implement those changes into our UI\n  componentDidMount() {\n    this.getDataFromDb();\n    if (!this.state.intervalIsSet) {\n      let interval = setInterval(this.getDataFromDb, 1000);\n      this.setState({ intervalIsSet: interval });\n    }\n  }\n\n  // never let a process live forever\n  // always kill a process everytime we are done using it\n  componentWillUnmount() {\n    if (this.state.intervalIsSet) {\n      clearInterval(this.state.intervalIsSet);\n      this.setState({ intervalIsSet: null });\n    }\n  }\n\n  // just a note, here, in the front end, we use the id key of our data object\n  // in order to identify which we want to Update or delete.\n  // for our back end, we use the object id assigned by MongoDB to modify\n  // data base entries\n\n  // our first get method that uses our backend api to\n  // fetch data from our data base\n  getDataFromDb = () => {\n    fetch(\"http://localhost:3001/articles\")\n      .then(data => data.json())\n      .then((res) => {\n        console.log(res.body);\n        this.setState({ data: res.body })\n      });\n  };\n\n  // our put method that uses our backend api\n  // to create new query into our data base\n  putDataToDB = message => {\n    let currentIds = this.state.data.map(data => data.id);\n    let idToBeAdded = 0;\n    while (currentIds.includes(idToBeAdded)) {\n      ++idToBeAdded;\n    }\n\n    axios.post(\"http://localhost:3001/api/putData\", {\n      id: idToBeAdded,\n      message: message\n    });\n  };\n\n\n  // our delete method that uses our backend api\n  // to remove existing database information\n  deleteFromDB = idTodelete => {\n    let objIdToDelete = null;\n    this.state.data.forEach(dat => {\n      if (dat.id == idTodelete) {\n        objIdToDelete = dat._id;\n      }\n    });\n\n    axios.delete(\"http://localhost:3001/api/deleteData\", {\n      data: {\n        id: objIdToDelete\n      }\n    });\n  };\n\n\n  // our update method that uses our backend api\n  // to overwrite existing data base information\n  updateDB = (idToUpdate, updateToApply) => {\n    let objIdToUpdate = null;\n    this.state.data.forEach(dat => {\n      if (dat.id == idToUpdate) {\n        objIdToUpdate = dat._id;\n      }\n    });\n\n    axios.post(\"http://localhost:3001/api/updateData\", {\n      id: objIdToUpdate,\n      update: { message: updateToApply }\n    });\n  };\n\n\n  // here is our UI\n  // it is easy to understand their functions when you\n  // see them render into our screen\n  render() {\n    const { data } = this.state;\n    return (\n      <div>\n        <ul>\n          {data.length <= 0\n            ? \"NO DB ENTRIES YET\"\n            : data.map(dat => (\n              <li style={{ padding: \"10px\" }} key={data.message}>\n                <span style={{ color: \"gray\" }}> id: </span> {dat.id} <br />\n                <span style={{ color: \"gray\" }}> data: </span>\n                {dat.message}\n              </li>\n            ))}\n        </ul>\n        <div style={{ padding: \"10px\" }}>\n          <input\n            type=\"text\"\n            onChange={e => this.setState({ message: e.target.value })}\n            placeholder=\"add something in the database\"\n            style={{ width: \"200px\" }}\n          />\n          <button onClick={() => this.putDataToDB(this.state.message)}>\n            ADD\n          </button>\n        </div>\n        <div style={{ padding: \"10px\" }}>\n          <input\n            type=\"text\"\n            style={{ width: \"200px\" }}\n            onChange={e => this.setState({ idToDelete: e.target.value })}\n            placeholder=\"put id of item to delete here\"\n          />\n          <button onClick={() => this.deleteFromDB(this.state.idToDelete)}>\n            DELETE\n          </button>\n        </div>\n        <div style={{ padding: \"10px\" }}>\n          <input\n            type=\"text\"\n            style={{ width: \"200px\" }}\n            onChange={e => this.setState({ idToUpdate: e.target.value })}\n            placeholder=\"id of item to update here\"\n          />\n          <input\n            type=\"text\"\n            style={{ width: \"200px\" }}\n            onChange={e => this.setState({ updateToApply: e.target.value })}\n            placeholder=\"put new value of the item here\"\n          />\n          <button\n            onClick={() =>\n              this.updateDB(this.state.idToUpdate, this.state.updateToApply)\n            }\n          >\n            UPDATE\n          </button>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default App;"]},"metadata":{},"sourceType":"module"}